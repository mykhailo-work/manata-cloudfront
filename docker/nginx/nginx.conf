# One worker process per CPU core.
worker_processes auto;

user nobody nogroup;
pid /run/nginx.pid;

# worker_rlimit_nofile = worker_connections * 2
worker_rlimit_nofile 20480;

events {
    # Determines how many clients will be served by each worker process.
    worker_connections 10240;
    # Let each process accept multiple connections.
    accept_mutex on;
    # Preferred connection method for newer linux versions.
    # Essential for linux, optmized to serve many clients with each thread.
    use epoll;
}


http {
    include mime.types;
    default_type application/octet-stream;

    types_hash_max_size 2048;

    # Override some buffer limitations, will prevent DDOS too.
    client_body_buffer_size 10K;
    client_header_buffer_size 1k;
    client_max_body_size 30m;
    large_client_header_buffers 2 1k;

    #
    # Timeouts
    # The client_body_timeout and client_header_timeout directives are
    # responsible for the time a server will wait for a client body or
    # client header to be sent after request. If neither a body or header
    # is sent, the server will issue a 408 error or Request time out.
    #
    # The keepalive_timeout assigns the timeout for keep-alive connections
    # with the client. Simply put, Nginx will close connections with the
    # client after this period of time.
    #
    # Finally, the send_timeout is a timeout for transmitting a response
    # to the client. If the client does not receive anything within this
    # time, then the connection will be closed.
    #

    #
    # send the client a "request timed out" if the body is not loaded
    # by this time. Default 60.
    #
    client_body_timeout 30;
    client_header_timeout 30;

    #
    # Every 60 seconds server broadcasts Sync packets, so 90 is a conservative upper bound.
    #
    keepalive_timeout 90; # default 65
    send_timeout 120; # default 60

    #
    # Allow the server to close the connection after a client stops responding.
    # Frees up socket-associated memory.
    #
    reset_timedout_connection on;

    #
    # Sendfile copies data between one FD and other from within the kernel.
    # More efficient than read() + write(), since the requires transferring
    # data to and from the user space.
    #
    sendfile on;

    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one
    # packet, instead of using partial frames. This is useful for prepending
    # headers before calling sendfile, or for throughput optimization.
    tcp_nopush on;

    #
    # don't buffer data-sends (disable Nagle algorithm). Good for sending
    # frequent small bursts of data in real time.
    #
    tcp_nodelay on;

    real_ip_header X-Forwarded-For;
    set_real_ip_from 0.0.0.0/0;

    limit_req_zone $binary_remote_addr zone=request_limit_second:10m rate=16r/s;
    limit_req_zone $binary_remote_addr zone=request_limit_minute:10m rate=60r/m;
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    limit_req_status 429;
    limit_conn_status 429;

    # logs settings for terminal
    error_log /dev/stderr;
    access_log /dev/stdout;

    upstream api_upstream {
        server api:8000 fail_timeout=0;
    }

    # Map websocket headers
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    server {
        listen 80;
        # listen 443 ssl;
        server_name pluggedtable.com *.pluggedtable.com;

        # ssl_certificate     /etc/ssl/private/pluggedtable.com.crt;
        # ssl_certificate_key /etc/ssl/private/pluggedtable.com.key;

        location / {
            proxy_pass http://api_upstream;
            include /etc/nginx/conf.d/proxy_params;

            limit_req zone=request_limit_second burst=10 nodelay;
            limit_conn addr 10;

            add_header Cache-Control "public, max-age=40";
        }

        location /static/ {
            alias /src/static/;

            add_header Cache-Control "public, max-age=40";
        }

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location = /robots.txt {
            allow all;
            log_not_found off;
            access_log off;
        }
    }
}